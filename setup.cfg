[metadata]
name = pubpypack-harmony-cindytsai
version = 0.0.2
url = https://github.com/cindytsai/MyPythonPackage
author = Shin-Rong Tsai
author_email = "Shin-Rong Tsai" <turquoisea.tsai@gmail.com>
description = This is my first python package.
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
license_files = LICENSE
classifiers = License :: OSI Approved :: MIT License

[options]
package_dir =
    =src
packages = find:
include_package_data = True
python_requires = >=3.9
install_requires =
    termcolor>=2.0.0,<3

[options.packages.find]
where=src
exclude =
    test*

[options.entry_points]
console_scripts =
    harmony = imppkg.harmony:main


## TOOL CONFIG ###

# type safety check using mypy
[mypy]
python_version = 3.9
warn_unused_configs = True
show_error_context = True
pretty = True
namespace_packages = True
check_untyped_defs = True


[flake8]
max-line-length = 120


[tool:pytest]
# find test in testpaths
testpaths =
    test

# run pytest --cov by default without specifying --cov (--no-cov in reverse)
addopts =
    --cov
    --strict-markers

# make sure marker are registered here, since we set --strict-markers to avoid silent issue
markers =
    mystuff: mark tests as my stuff as a pytest mark example

# fail if expected failure is passed
xfail_strict = True


[coverage:run]
# run branch test
branch = True

# set pytest --cov=imppkg
source =
    imppkg

[coverage:paths]
# simplify the output path, the first entry will replace the following
source =
    src/imppkg/
    */site-packages/imppkg/

[coverage:report]
# show missing lines that aren't tested
show_missing = True

# skip fully covered file
skip_covered = True


[tox:tox]
isolated_build = True

# env to test
envlist = py310, py39

# defining subset of dependencies for reuse
[testimports]
deps =
    pytest
    requests

# default env for envlist
[testenv]
# dependencies in tox env
deps =
    {[testimports]deps}
    pytest-cov
    pytest-randomly
commands =
    pytest {posargs}

# nondefault env in tox
[testenv:get_my_ip]
deps =
    requests
commands =
    python -c "import requests; print(requests.get('https://canhazip.com').text)"

# env for type checking using mypy
[testenv:typecheck]
deps =
    pytest
    mypy
    types-termcolor
# tell mypy check as many as it can, and ignore the ones that it cannot analyze
commands =
    mypy --ignore-missing-imports {posargs:src test}

# env for formatting using black
[testenv:format]
# black doesn't need your package to be installed, since it's static analysis
skip_install = True
deps =
    black
commands =
    black {posargs: -- src test}

# env for linting using flake8
[testenv:lint]
deps =
    flake8
    flake8-bugbear
commands =
    flake8 {posargs:src test}

# env for building docs using sphinx
[testenv:docs]
deps =
    sphinx
    sphinx_rtd_theme
commands =
    #sphinx-quickstart docs
    sphinx-apidoc \
        --force \
        --implicit-namespaces \
        --module-first \
        --separate \
        -o docs/reference/ \
        src/imppkg/ \
        src/imppkg/*.c \
        src/imppkg/*.so
    sphinx-build -n -W --keep-going -b html docs/ docs/_build/

# env for hosting docs on local machine
[testenv:devdocs]
deps =
    sphinx
    sphinx-autobuild
    sphinx_rtd_theme
commands =
    sphinx-apidoc \
        --force \
        --implicit-namespaces \
        --module-first \
        --separate \
        -o docs/reference/ \
        src/imppkg/ \
        src/imppkg/*.c \
        src/imppkg/*.so
    sphinx-autobuild -n -W -b html docs/ docs/_build/ --port 8000
